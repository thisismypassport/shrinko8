picotron cartridge // www.picotron.net
version 2

:: main.lua
-- this tests a good deal of syntax

function xeq(a,b)
  return type(a) == type(b) and math.type(a) == math.type(b) and a == b
end

-- assert(false)
--[==[
    assert(false)
    [[assert(false)]]
    [=[assert(false)]=]
    assert(false)]===]
]==] x=1
assert(true,1)
assert(x==1,2)
assert("\0\0123\n\t\+\z   

  \x41\x61"=="\000\x0c\x33\
\9\5Aa",2.5)
assert("\'\"\\'"==[['"\']],3)
assert("\u{0}\u{7f}\u{80}\u{7ff}\u{800}\u{ffff}\u{10000}\u{1fffff}\u{200000}\u{3ffffff}\u{4000000}\u{7fffffff}"==
       "\0\x7f\xc2\x80\xdf\xbf\xe0\xa0\x80\xef\xbf\xbf\xf0\x90\x80\x80\xf7\xbf\xbf\xbf\z
        \xf8\x88\x80\x80\x80\xfb\xbf\xbf\xbf\xbf\xfc\x84\x80\x80\x80\x80\xfd\xbf\xbf\xbf\xbf\xbf",3.5)
assert([==[]]]==]=="]]",4)
assert(not xeq(1234567890,1234567890.0),5)
assert(xeq(1e3,1000.0) and xeq(12345678901234567890, 12345678901234567890.0),5.1)
assert(xeq(0x123.45p-12,0.071110725402832031),5.2)
assert(0xf.f==15.9375 and 0B10.01==2.25,6)
assert(0b01100==0xc and 0b11111111111111111111111111111111111111111111111111111111111111111==-1,6.1)
assert(1e400==0x1p1024 and -1e400==-math.huge,6.2)
assert(001.751532838832970300e-00277 == tonum("1.7515328388329703e-277"), 7)
assert(6.707235992995134e-30 == tonum("6.707235992995134e-30"), 7.1)
a,b,c=1,{},3
a,b.n,b[1],c=c,2,4,a
assert(a==3 and c==1 and b['n']==2 and b[1]==4,8)
do local a=a+1 assert(a==4,9) 
   local a=a*2 assert(a==8,9.1) end assert(a==3,9.2)
local z=_ENV; assert(z==_ENV,10)
local z; assert(z==nil,11)
function f() return 1,2,3 end
local u,v,w,x,y,z = 0,f()
assert(u==0 and v==1 and w==2 and x==3 and y==nil and z==nil,12)
CC=0
do closer = setmetatable({}, {__close=function() CC=33 end})
local uu <const>, vv <close> = 4, closer
assert(uu==4, 12.5)
end assert(CC==33, 12.6)
function f(...) return ... end
assert(f(1,2,3)==1,13)
a,b = (f(1,2)); assert(a==1 and b==nil,14)
a,b = f(1,2),3; assert(a==1 and b==3,15)
assert(pack(f(1,2,nil,3,nil,nil)).n==6,16)
function f(...) return ..., ..., ... end
assert(pack(f(1,2,3)).n == 5,17)
for i=1,3 do assert(select(i,f(1,2,3))==1,18) end
assert(select(4,f(1,2,3))==2,19)
j=0; for i=5,1,-2 do j=1 assert(i==5 or i==3 or i==1,20) end assert(j==1,20.5)
for i=5,1 do assert(false,21) end
j=0; for k,v in ipairs{4,5} do
    assert(k==1 and v==4 or k==2 and v==5,22); j += 1
end
assert(j==2,22.5)
if j==2 then j+=1 else assert(false,23) end assert(j==3,23.5)
if j==2 then assert(false,24) elseif j==3 then j+=1 else assert(false,24.5) end assert(j==4,24.6)
if j==2 then assert(false,25) else j+=1 end assert(j==5,25.5)
if j==2 then assert(false,25.8) else j+=1 end assert(j==6,25.9)
if (j==6) j=0;j=1 else assert(false,26)
assert(j==1,27)
if (j==5) assert(false,28) else j=2
assert(j==2,29)
k=1; while (j>0) j-=1 k*=2
assert(k==4 and j==0,30)
while k>0 do k-=1 j+=1 end; assert(j==4 and k==0,31)
while j>0 do j-=1 k+=1 if k==3 then break end end
assert(j==1 and k==3,32)
repeat j+=1; k-=1 until j==1 or j==3
assert(j==3 and k==1,33)
function f() return end; function g() end
assert(f()==nil and pack(f()).n==0,34)
assert(g()==nil and pack(g()).n==0,35)
function h(...) return ... end
a={1,2,a=1;b=2;3;4,[12]=4,h(5,6,nil,8)}
assert(a[1]==1 and a[2]==2 and a[3]==3 and a[4]==4 and a[5]==5 and a[6]==6,36)
assert(a[7]==nil and a[8]==8 and a[--[[member]]'a']==1 and a.b==2 and a[12]==4,37)
function h(...) return {...,} end
do local function h(...) return {...,a=3} end
   assert(#h(1,2)==1 and h(1,2).a==3,38) end
assert(#h(1,2)==2,39)
assert(1+4*5==21 and 0x1f2&0xff<<4==0x1f0,40)
assert((1+4)*5==25 and (0x1f2&0xff)<<4==0xf20,41)
assert(-2^4==-16 and (-2)^4==16,42)
assert(1!=2 and 1~=2 or assert(false,43),43.1)
poke8(4, -3)
assert(2**4 == -6, 43.5)
x={f=function(u) return u.z end,z=3}
assert(x:f()==3 and x.f{z=4}==4,44)
setmetatable(x,{__index=function(o,k) return k end})
assert(x.boo==--[[member]]"boo",45)
x.g=x
function x.g.g.z(x) return x end; assert(x.z(false)==false,46)
function x.g.g:zoo(x) return self,x end
assert(x:zoo(true)==x and select(2,x:zoo(true))==true,47)
do u=1 do ::x:: u += 1
  if (u==4) goto e
goto x end ::e:: assert(u==4,48) end
do ::y_cant:: do goto y assert(false,49) ::y:: end end -- 5.4 no longer allows using ::y:: in both places here
u=0; for k,v in next, {5} do assert(k==1 and v==5,50); u+=1 end
assert(u==1,50.5)
do local oldadd, _ENV = add, {--[[global]]assert=assert}
  oldadd(_ENV, 3) assert(_ENV[1] == 3,51) end -- removed add=nil check as not true in pico8 due to global-as-local inclusion
local function o(k) _ENV=k end
local oldenv = _ENV
o({--[[global]]assert=assert,--[[global]]uvw=123}) assert(uvw==123,52) o(oldenv)
function f() return 9,0,1 end
function s(f) return f() end
function r(f) return (f()) end
assert(pack(s(f)).n == 3 and pack(r(f)).n == 1,53)
u=0x.0040
if u<1 then
if (u==0) u=123
else u=321 end
assert(u==0x.0040,55)
aa=23//4
assert(aa == 5,55.1)
aa//=3
assert(aa == 1,55.2)
do local zoom = 1; function zoom() end end
assert(zoom==nil,56)
u=1; repeat local u=2 until assert(u==2,57)
do local u=2 repeat local v=3 until assert(u*v==6,57.5) end
local function f() return 3 end
assert(-f() + f() == 0,58)
local function ff() return f end
assert(ff()() == 3,59)
local function roo(a,i) local f = function () a += 1; return a end
  if i and i > 0 then return f,roo(a*2,i-1) else return f end end
local r,s,t1,t2 = roo(10),roo(20),roo(30,1)
assert(r()==11 and s()==21 and roo(0)()==1 and t1()==31 and t2()==61
  and r()==12 and s()==22 and roo(0)()==1 and t1()==32 and t2()==62, 60)
function uu(s) return s end
assert(uu"me" == "me" and uu[[me]] == "me", 61)
uo = {uu=function(m,s) return s end}
assert(uo:uu"me" == "me" and #uo:uu{} == 0, 62)
do while true do if 1==1 then ::zoo:: end goto zoo end ::zoo:: end
local a=1 function spa() return a end
local a=2 assert(spa()==1, 63)
local b=1 do function spb() return b end
local b=2 assert(spb()==1, 64) end
do local i,c = 1,2 ::_1:: assert(c==2, 65);
   if (i>1) assert(fff()==4 and c==2, 66) goto out
   local c=3; fff = function () c += 1 return c end
   i+=1 goto _1
end ::out::
do local i=1 ::_1:: local x=i ff=fff fff=function() x += 1 return x end
  i+=1 if(i==3) goto out2 else goto _1
end ::out2::
assert(fff()==3 and fff()==4 and ff()==2 and fff()==5 and ff()==3,67)
do goto foo local bah ::foo::;; end
if (1==1);
local o=0 function ord(i,ret) assert(o==i,68); o+=1; return ret end
local res = {}; ord(0,res).x, ord(1,res).x = ord(2,2), ord(3,function() return 3 end) (ord(4,1), ord(5,1))
assert(res.x==2,69)
local a,a = 1,2
assert(a==2,70)
function f(a,a) assert(a==2,71)end f(1,2)
ffg = 0; fft = {10,20}
function ff() ffg += 1; return ffg end
fft[ff()] += 1
assert(fft[1]==11 and fft[2]==20,72)
a=0--[=[[[a+=1]][[a+=2]][[]]--[[--[==[a+=4]==]]]a+=8]=]a+=16
assert(a==16,73)
assert([[[[]]=="[[",73.5) -- ]]
if (1==1) if (2==3) a=1 else a=2 else a=3
assert(a==2,74)
if (1==2) if (2==3) a=1 else a=2 else a=3
assert(a==3,74.1)
i=1 while(i<10) i+=1 if (i==5) break
assert(i==5,75)
if (1==2) i=1 else if (1==3) i=2 else i=3
assert(i==3,76)
if (1==1) if (2==2) then a=4 else a=5 end else a=6
assert(a==4,77)
do a=0 if (1==2) end a=123
assert(a==123,78)
do local pprint, r = print; print = function(x) r=x end; ?1
   assert(r==1,79) print = pprint end
do local r; local print = function(x) r=x end; ?2
   assert(r==2,80) end
f=1({x=1}).x=2 assert(f==1,81)
f={1}({x=1}).x=2 assert(f[1]==1,81.1)
f="1"({x=1}).x=2 assert(f=="1",81.2)
f=function()end({x=1}).x=2 assert(f()==nil,81.3)
printh("DONE")
:: [eoc]
